# this CPU implementation is using the new core/CPU interface
export CFLAGS += -DCOREIF_NG=1


export CPU_ARCH = cortex-m3
# export CPU_FAM  = stm32f1

export USEMODULE += cortexm_common
export CORTEX_COMMON = $(RIOTCPU)/cortexm_common/

export USEMODULE += cc26xx-cc13xx_common
export USEMODULE += tilib lib cc26xxware driverlib

export CC26XX-CC13XX_COMMON = $(RIOTCPU)/cc26xx-cc13xx_common/

export INCLUDES += -I$(RIOTCPU)/$(CPU)/include
export INCLUDES += -I$(CORTEX_COMMON)/include
export INCLUDES += -I$(CC26XX-CC13XX_COMMON)/include

export INCLUDES += -I$(RIOTBASE)/core/include
export INCLUDES += -I$(RIOTBASE)/drivers/include
export INCLUDES += -I$(RIOTBASE)/sys/include

# export UNDEF += $(BINDIR)cpu/syscalls.o
# export UNDEF += $(BINDIR)cpu/startup_$(CPU).o






#export the CPU model
MODEL = $(shell echo $(CPU_MODEL)|tr 'a-z' 'A-Z')
export CFLAGS += -DCPU_MODEL_$(MODEL)

export CPU_UPPER = $(shell echo $(CPU)|tr 'a-z' 'A-Z')

# define the linker script to use for this CPU. The CPU_MODEL variable is defined in the
# board's Makefile.include. This enables multiple STMF0 controllers with different memory to
# use the same code-base.
export LINKERSCRIPT = $(RIOTCPU)/$(CPU)/$(CPU).ld

# include CPU specific includes
# export INCLUDES += -I$(RIOTCPU)/efm32_common/CMSIS/Include
# export INCLUDES += -I$(RIOTCPU)/efm32_common/emlib/inc
export INCLUDES += -I$(CC26XX-CC13XX_COMMON)/include
# export INCLUDES += -I$(CC26XX-CC13XX_COMMON)/tilib/include

# riot standard includes
export INCLUDES += -I$(RIOTBASE)/core/include
export INCLUDES += -I$(RIOTBASE)/drivers/include
export INCLUDES += -I$(RIOTBASE)/sys/include

# export the peripheral drivers to be linked into the final binary
# export USEMODULE += periph drivers emlib
export USEMODULE += tilib periph drivers




















CPU_ABS_PATH       = cpu/cc26xx-cc13xx_common
TI_XXWARE = $(RIOTCPU)/cc26xx-cc13xx_common/$(TI_XXWARE_PATH)

### cc26xxware sources under driverlib will be added to the MODULES list
TI_XXWARE_SRC = $(CPU_ABS_PATH)/$(TI_XXWARE_PATH)/driverlib

### The directory with startup sources will be added to the CONTIKI_CPU_DIRS
### and the sources therein are added to the sources list explicitly. They are
### also listed explicitly in the linker command (through TARGET_STARTFILES),
### to make sure they always get linked in the image
TI_XXWARE_STARTUP_DIR = $(TI_XXWARE_PATH)/startup_files
TI_XXWARE_STARTUP_SRCS = ccfg.c startup_gcc.c

### MODULES will add some of these to the include path, but we need to add
### them earlier to prevent filename clashes with Contiki core files
export INCLUDES += -I$(TI_XXWARE) -I$(CONTIKI)/$(TI_XXWARE_SRC)
export INCLUDES += -I$(TI_XXWARE)/inc

export INCLUDES += -I$(RIOTCPU)/cc26xx-cc13xx_common/tilib/inc
export INCLUDES += -I$(RIOTCPU)/cc26xx-cc13xx_common/tilib/dev/inc
export INCLUDES += -I$(RIOTCPU)/cc26xx-cc13xx_common/tilib/rf-core/inc
export INCLUDES += -I$(RIOTCPU)/cc26xx-cc13xx_common/tilib/rf-core/api

# MODULES += $(TI_XXWARE_SRC)


### CPU-dependent directories
CONTIKI_CPU_DIRS = . dev rf-core rf-core/api $(TI_XXWARE_STARTUP_DIR)

### Use the existing debug I/O in cpu/arm/common
CONTIKI_CPU_DIRS += ../arm/common/dbg-io

### CPU-dependent source files
CONTIKI_CPU_SOURCEFILES += clock.c rtimer-arch.c soc-rtc.c uart.c
CONTIKI_CPU_SOURCEFILES += contiki-watchdog.c
CONTIKI_CPU_SOURCEFILES += putchar.c ieee-addr.c batmon-sensor.c
CONTIKI_CPU_SOURCEFILES += slip-arch.c slip.c cc26xx-uart.c lpm.c
CONTIKI_CPU_SOURCEFILES += gpio-interrupt.c oscillators.c
CONTIKI_CPU_SOURCEFILES += rf-core.c rf-ble.c ieee-mode.c

DEBUG_IO_SOURCEFILES += dbg-printf.c dbg-snprintf.c dbg-sprintf.c strformat.c

CONTIKI_SOURCEFILES += $(CONTIKI_CPU_SOURCEFILES) $(DEBUG_IO_SOURCEFILES)

TARGET_START_SOURCEFILES += fault-handlers.c $(TI_XXWARE_STARTUP_SRCS)
TARGET_STARTFILES = $(addprefix $(OBJECTDIR)/,$(call oname, $(TARGET_START_SOURCEFILES)))
